<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式系统 on 子春廿一</title>
    <link>http://localhost:1313/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</link>
    <description>Recent content in 分布式系统 on 子春廿一</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式系统作业丨02</title>
      <link>http://localhost:1313/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A%E4%B8%A802/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A%E4%B8%A802/</guid>
      <description>&lt;p&gt;&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https:github.com/Zhang-Xiaoda/NJU-DisSys-2017/&#34; target=&#34;_blank&#34;&gt; 作业地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟机 Ubuntu-22.04.1&lt;/li&gt;&#xA;&lt;li&gt;Go 1.23.4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://go.dev/dl/&#34; target=&#34;_blank&#34;&gt; GO 下载地址&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一次接触 Go 语言还是踩了一些坑的，因为看到老师给出的 ppt 要求在1.5以上，就下载了最新版本，因为墙的原因，我的 Ubuntu 不能直接下载，所以用WinSCP 传到我的 Ubuntu 里面去，接着在b站搜索了一个部署环境的&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://www.bilibili.com/video/BV1PR4y1C7Bw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1837baf7c46a027b7e27b4ab7174fb85&#34; target=&#34;_blank&#34;&gt;教程&lt;/a&gt;。&lt;del&gt;（虽然一开始错安装成32位的了，导致后续安装其他 package 的时候会和 gcc 的版本不一致）&lt;/del&gt;然后我发现我照着 PPT 上的指令去做，始终不行。我看着报错的内容突然想起了之前看到同学在群里闲聊到这个作业的时候的内容，和 GO 的不同版本的环境配置有关，当时觉得可能有用就顺手收藏了，于是我翻出收藏的内容，输入指令 &lt;code&gt;export GO111MODULE=off&lt;/code&gt; 果然好使。&lt;/p&gt;&#xA;&lt;h2 id=&#34;assignment-part-i&#34;&gt;Assignment Part I&lt;/h2&gt;&#xA;&lt;h4 id=&#34;任务要求&#34;&gt;任务要求&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Implement Raft by adding code to raft/raft.go (only)&lt;/p&gt;&#xA;&lt;p&gt;– find some example code of how to send and receive RPC&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Your task: Leader election:&lt;/p&gt;&#xA;&lt;p&gt;– First task is to fill the RequestVoteArgs and RequestVoteReply structs&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式系统作业丨01</title>
      <link>http://localhost:1313/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A%E4%B8%A801/</link>
      <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BD%9C%E4%B8%9A%E4%B8%A801/</guid>
      <description>&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;&#xA;&lt;p&gt;远程过程调用 (RPC) 是一种允许程序在不同计算机之间进行通信的协议。它使得客户端可以像调用本地函数一样调用远程服务器上的函数，而无需了解底层的网络细节。这一次的作业是实现RPC机制下的“黑杰克”游戏&lt;/p&gt;&#xA;&lt;h2 id=&#34;分析与设计&#34;&gt;分析与设计&lt;/h2&gt;&#xA;&lt;p&gt;首先在 ubuntu 下下载并使用 rpcgen 编写 .x 文件，使用 rpcgen blackjack.x 生成文件并完善逻辑。&lt;/p&gt;&#xA;&lt;p&gt;基本规则如下：&lt;/p&gt;&#xA;&lt;h3 id=&#34;卡片值&#34;&gt;卡片值&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数字牌(2-10)：牌的价值等于其面值。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;人头牌(J、Q、K):每张价值10分。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A:可以值1分或11分，具体取决于哪个对玩家的手牌更有利。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;所以我用两个数组分别记录四个花色和13种牌面，外循环来选择牌面，内循环选择花色，来给 52 张牌初始化，并且外循环的牌面从 2 开始，也就是 2 - 10，J ，Q ，K ，A ，这样 2  - 10 的部分用外循环的值加2即可，然后针对 i + 2 等于 11，12，13 的赋值为 10，等于  14 则赋值为 11 。并且根据有多少副牌就重复多少次这个过程。在计分时，每遇到一个手牌分值为11的就用一个变量记录一次，这样当手牌分值超过 21 且记录值大于 0 的时候，总分减去 10，这样就达成了 A 值 1 分或 11 分取决于哪个对玩家更有利的规则。&lt;/p&gt;&#xA;&lt;h3 id=&#34;游戏流程&#34;&gt;游戏流程&lt;/h3&gt;&#xA;&lt;p&gt;游戏用一个结构体game state来表示这场游戏的状态：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;style=&#34;position:relative;&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34; id = &#34;code1&#34;&gt;struct game_state {&#xD;&#xA;    int num_decks;&#xD;&#xA;    int action;  /* 玩家操作：0: 拿牌, 1: 停牌 */&#xD;&#xA;    struct hand player_hand; /* 玩家手牌 */&#xD;&#xA;    struct hand dealer_hand; /* 庄家手牌 */&#xD;&#xA;    int player_busted; /* 玩家是否爆牌 (0: 未爆牌, 1: 已爆牌) */&#xD;&#xA;    int dealer_busted; /* 庄家是否爆牌 (0: 未爆牌, 1: 已爆牌) */&#xD;&#xA;    int result; /* 游戏结果 (0: 游戏进行中, 1: 玩家赢, 2: 庄家赢, 3: 平局) */&#xD;&#xA;};&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&lt;button class=&#34;copy-button&#34; data-clipboard-target=&#34;#code1&#34;&gt;Copy&lt;/button&gt;&#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;p&gt;这个结构体用来表示一张牌，主要有三个部分&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
