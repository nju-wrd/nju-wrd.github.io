<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UE5-C&#43;&#43; on 子春廿一</title>
    <link>https://nju-wrd.github.io/categories/ue5-c&#43;&#43;/</link>
    <description>Recent content in UE5-C&#43;&#43; on 子春廿一</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nju-wrd.github.io/categories/ue5-c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UE5C&#43;&#43;开发学习笔记丨03</title>
      <link>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A803/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A803/</guid>
      <description>&lt;details&gt;&lt;summary&gt;&lt;font size = 5&gt;&lt;b&gt;目录 - Table of contents&lt;/b&gt;&lt;/font&gt;&lt;/summary&gt;&#x9;&lt;p&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#00&#34;&gt;UEC++的基础变量类型&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#01&#34;&gt;FString、FName、FText的区别&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#02&#34;&gt;UEC++的容器TArray&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;    &lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#03&#34;&gt;UEC++的容器TMap&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;    &lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#04&#34;&gt;UEC++的容器TSet&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;    &lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#05&#34;&gt;UEC++基础数据类型输出打印&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;    &lt;/p&gt; &lt;/details&gt;&#xD;&#xA;&lt;p&gt;&lt;a id=&#34;00&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;uec的基础变量类型&#34;&gt;UEC++的基础变量类型&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 布尔类型变量声明&#xD;&#xA;bool varBool;&#xD;&#xA;// 整型32位的变量声明&#xD;&#xA;int32 varInt32;&#xD;&#xA;// 整型64位的变量声明&#xD;&#xA;int64 varInt64;&#xD;&#xA;// 字节类型的变量声明&#xD;&#xA;BYTE varByte;&#xD;&#xA;// String类型的变量声明字符串的类型&#xD;&#xA;FString varString;&#xD;&#xA;// Name名称类型的变量声明&#xD;&#xA;FName varName;&#xD;&#xA;// FText文本类型的变量声明&#xD;&#xA;FText varText;&#xD;&#xA;// FVector;向量类型的变量声明&#xD;&#xA;FVector varVector;// 这个就是x轴，Y轴，Z轴的坐标&#xD;&#xA;// FRotator旋转类型的变量声明&#xD;&#xA;FRotator varRotator;// 这个就是x轴的旋转Ro1L,Y轴的旋转Pitch,Z轴的旋转Yam&#xD;&#xA;// FTransform类型的变量声明&#xD;&#xA;FTransform varTransform;// 这个就是既有FVector也有FRotator,还有缩放Scale三者的集合类型(一个齐次矩阵)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a id=&#34;01&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;fstringfnameftext的区别&#34;&gt;FString、FName、FText的区别&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;FString&lt;/strong&gt;用于表示动态字符串。FString是一个标准的可变字符串类型，用于在运行时处理文本。它可以包含任意字符，并且可以修改和动态改变内容。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存动态分配，适合在程序中频繁修改或拼接字符串。&lt;/li&gt;&#xA;&lt;li&gt;支持Unicode字符，可以包含所有字符集。&lt;/li&gt;&#xA;&lt;li&gt;适用于一般的文本处理，比如文件路径、用户输入等。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;FName&lt;/strong&gt;用于表示轻量级、不可变的字符串，通常用于标识符（如资源名称、对象标签、蓝图类名等）。FName是一种轻量的、高效的字符串表示方式，用于需要进行频繁比较的场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UE5C&#43;&#43;开发学习笔记丨02</title>
      <link>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A802/</link>
      <pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A802/</guid>
      <description>&lt;details&gt;&lt;summary&gt;&lt;font size = 5&gt;&lt;b&gt;目录 - Table of contents&lt;/b&gt;&lt;/font&gt;&lt;/summary&gt;&#x9;&lt;p&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#00&#34;&gt;UEC++游戏架构&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#01&#34;&gt;创建C++类&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#02&#34;&gt;重写BeginPlay、Tick、EndPlay函数&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;    &lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#03&#34;&gt;UE_LOG和AddOnScreenDebugMessage&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;    &lt;/p&gt; &lt;/details&gt;&#xD;&#xA;&lt;p&gt;&lt;a id=&#34;00&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;uec游戏架构&#34;&gt;UEC++游戏架构&lt;/h2&gt;&#xA;&lt;image src = &#34;construct.png&#34; alt = &#34;UE内游戏结构&#34; /&gt;&#xD;&#xA;&lt;h3 id=&#34;游戏模式gamemode&#34;&gt;游戏模式（GameMode）&lt;/h3&gt;&#xA;&lt;p&gt;游戏模式也就是游戏的基础规则，负责管理游戏规则和流程的核心类。它定义了玩家的行为、游戏的胜利或失败条件、关卡规则以及默认的玩家控制器、HUD 等关键组件。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;默认pawn类（Default Pawn Class）&lt;/strong&gt;，可以是有运动属性的character，也可以是不带有运动属性的pawn。这个可以理解成人体的躯干，它可以被controller控制，而controller可以是玩家，也可以是我们的AI controller。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;HUD类（用户界面类）&lt;/strong&gt;，绘制到屏幕上的UI，用来进行一些交互界面的展示。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;玩家控制器类（Player Controller Class）&lt;/strong&gt;，控制器是一个非物理的Actor，可以是一个pawn或者是一个pawn的派生类，可以控制角色的移动。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;游戏状态类（Game State Class）&lt;/strong&gt;，主要是追踪记录游戏层面的属性，比如说已经连接玩家的列表，团队的一些得分，开放世界中完成的任务等等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;玩家状态类（Player State Class）&lt;/strong&gt;，追踪玩家的状态属性，比如当前玩家的姓名，得分，在线状态等等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;旁观者类（Spectator Class）&lt;/strong&gt;，描述第三方的视角。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a id=&#34;01&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建c类&#34;&gt;创建C++类&lt;/h2&gt;&#xA;&lt;p&gt;这里用一个和之前创建C++类略有不同的方法，但殊途同归。&lt;/p&gt;&#xA;&lt;p&gt;首先使用ctrl + 空格召唤出内容菜单，在C++类文件夹中右击可以选择新建C++类，这里展示一个示例。&lt;/p&gt;&#xA;&lt;image src = &#34;menu.png&#34; alt = &#34;创建C++类&#34; /&gt;&#xD;&#xA;&lt;image src = &#34;choose.png&#34; alt = &#34;选择要创建的C++类&#34; /&gt;&#xD;&#xA;&lt;image src = &#34;generate.png&#34; alt = &#34;创建C++类&#34; /&gt;&#xD;&#xA;&lt;p&gt;创建成功会在living coding界面显示&lt;/p&gt;</description>
    </item>
    <item>
      <title>UE5C&#43;&#43;开发学习笔记丨01</title>
      <link>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A801/</link>
      <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/ue5c&#43;&#43;%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A801/</guid>
      <description>&lt;details&gt;&lt;summary&gt;&lt;font size = 5&gt;&lt;b&gt;目录 - Table of contents&lt;/b&gt;&lt;/font&gt;&lt;/summary&gt;&#x9;&lt;p&gt;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#00&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#01&#34;&gt;创建项目&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#02&#34;&gt;头文件的含义&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;    &lt;li&gt;&lt;a style=&#34;color: #1e90ff;&#34; href=&#34;#03&#34;&gt;UEC++各个宏的作用&lt;/a&gt;&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;    &lt;/p&gt; &lt;/details&gt;&#xD;&#xA;&lt;p&gt;&lt;a id=&#34;00&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;由于腾讯客户端公开课的课程内容没有录播，并且内容量非常大，另外由于前段时间碰上期末周，所以一直没法快速跟上作业内容。于是我决定先从UE5的C++开发的基础学起，再去完成搁置的作业内容。&lt;/p&gt;&#xA;&lt;p&gt;学习内容来自于：&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://www.bilibili.com/video/BV1Dc411f7nx?spm_id_from=333.788.videopod.episodes&amp;vd_source=1837baf7c46a027b7e27b4ab7174fb85&#34; target=&#34;_blank&#34;&gt;【虚幻5】UE5C++零基础全网全流程开发从入门到进阶教程合集&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;开发工具:VS2022&lt;/p&gt;&#xA;&lt;p&gt;另外在开始学习之前，在评论区看到有推荐一个插件，设置教程链接如下：&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://dev.epicgames.com/documentation/en-us/unreal-engine/using-the-unrealvs-extension-for-unreal-engine-cplusplus-projects?application_version=5.4&#34; target=&#34;_blank&#34;&gt;将 UnrealVS 扩展用于 Unreal Engine C++ 项目&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a id=&#34;01&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建项目&#34;&gt;创建项目&lt;/h2&gt;&#xA;&lt;p&gt;下图会展示如何创建一个UE5游戏开发的C++项目&lt;/p&gt;&#xA;&lt;img src = &#34;generate.png&#34; alt = &#34;创建项目&#34; /&gt;&#xD;&#xA;&lt;p&gt;创建完成后会自动打开Visual Studio，按下图所示点击生成可以编译代码,若无问题可以生成成功。&lt;/p&gt;&#xA;&lt;img src = &#34;build.png&#34; alt = &#34;生成&#34; /&gt;&#xD;&#xA;&lt;img src = &#34;success.png&#34; alt = &#34;生成成功&#34; /&gt;&#xD;&#xA;&lt;p&gt;然后看一下侧边的解决方案，其中Engine/UE5是引擎自身的相关文件，Games/Project4Learning就是刚刚创建的项目的一些文件信息。Config是一些配置文件，Source是项目的一些源文件，现在能看到的文件是创建项目时会默认生成的。&lt;/p&gt;&#xA;&lt;img src = &#34;information.png&#34; alt = &#34;信息介绍&#34; /&gt;&#xD;&#xA;&lt;p&gt;其中Build.cs文件很重要，它是描述的每个模块的环境依赖信息，表示我这个项目用到了哪些模块，比如这里引擎默认带有的模块&amp;quot;Core&amp;quot;, &amp;ldquo;CoreUObject&amp;rdquo;, &amp;ldquo;Engine&amp;rdquo;, &amp;ldquo;InputCore&amp;rdquo;, &amp;ldquo;EnhancedInput&amp;rdquo;。第3行的using UnrealBuildTool；用到的UBT，会编译每一个模块并处理相关依赖信息。UHT（Unreal Header Tool）会收集我们虚幻的一些头文件，编译生成反射数据，这些反射数据会生成一个generator.h或.cpp当中。我们的头文件发生变化时，虚幻引擎底层也会调用并产生新的反射数据&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
