<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on 子春廿一</title>
    <link>http://localhost:1313/categories/c%23/</link>
    <description>Recent content in C# on 子春廿一</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Sat, 18 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/c%23/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C#图解教程丨03 C#编程概述</title>
      <link>http://localhost:1313/posts/c%23%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B%E4%B8%A803-c%23%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sat, 18 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/c%23%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B%E4%B8%A803-c%23%E7%BC%96%E7%A8%8B%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h2 id=&#34;31-一个简单的c程序&#34;&gt;3.1 一个简单的C#程序&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Simple&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Program&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 声明一个类&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi there!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码包含在一个名称为SimpleProgram.cs的文本文件里。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当代码被编译执行时，它在屏幕的一个窗口中显示字符串“Hi there!”。&lt;/li&gt;&#xA;&lt;li&gt;第5行包含两个连续的斜杠。这两个字符以及这一行中它们之后的所有内容都会被编译器忽略。这叫作单行注释。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34; cellspacing=&#34;0&#34;&gt;&#xD;&#xA;  &lt;colgroup&gt;&#xD;&#xA;    &lt;col style=&#34;width: 10%;&#34;&gt;&#xD;&#xA;    &lt;col style=&#34;width: 90%;&#34;&gt;&#xD;&#xA;  &lt;/colgroup&gt;&#xD;&#xA;  &lt;thead&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;th&gt;行号&lt;/th&gt;&#xD;&#xA;      &lt;th&gt;描述&lt;/th&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;  &lt;/thead&gt;&#xD;&#xA;  &lt;tbody&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;行1&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;告诉编译器这个程序使用System命名空间的类型&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;行3&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;声明一个新命名空间，名称为Simple：&lt;br&gt;新命名空间从第4行的左大括号开始一直延伸到第12行与之对应的右大括号&lt;br&gt;在这部分里声明的任何类型都是该命名空间的成员&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;行5&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;声明一个新的类类型，名称为Program：&lt;br&gt;任何在第6行和第11行的两个大括号中间声明的成员都是组成这个类的成员&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;行7&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;声明一个名称为Main的方法作为类Program的成员：&lt;br&gt;在这个程序中，Main是Program类的唯一成员&lt;br&gt;Main是一个特殊函数，编译器用它作为程序的起始点&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;行9&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;只包含一条单独的、简单的语句，这一行组成了Main的方法体：&lt;br&gt;简单语句以一个分号结束&lt;br&gt;这条语句使用命名空间System中的一个名称为Console的类将消息输出到屏幕窗口&lt;br&gt;没有第1行的using语句，编译器就不知道在哪里寻找类Console&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;/tbody&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;&lt;p&gt;C#程序由一个或多个类型声明组成。后续大部分内容都用来解释可以在程序中创建和使用的不同类型。程序中的类型可以以任何顺序声明。在SimpleProgram中，只声明了class类型。&lt;/p&gt;&#xA;&lt;p&gt;命名空间是与某个名称相关联的一组类型声明。SimpleProgram使用了两个命名空间。它创建了一个名称为Simple的新命名空间，并在其中声明了其类型（类program)，还使用了System命名空间中定义的Console类。&lt;/p&gt;&#xA;&lt;p&gt;要编译这个程序，可以使用Visual Studio或命令行编译器。如果使用命令行编译器，最简单的形式是在命名窗口使用下面的命令：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;csc SimpleProgram.cs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这条命令中，csc是命令行编译器的名称，SimpleProgram.cs是源文件的名称。csc是指“C-sharp编译器”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32-标识符&#34;&gt;3.2 标识符&lt;/h2&gt;&#xA;&lt;p&gt;标识符是一种字符串，用来命名变量、方法、参数和许多后面将要阐述的其他程序结构。可以通过把有意义的词连接成一个单独的描述性名称来创建自文档化（self-documenting）的标识符，可以使用大写和小写字母（如CardDeck、PlayersHand、FirstName和SocialSecurityNum）。某些字符能否在标识符中特定的位置出现是有规定的。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字母和下划线(a-z、A-Z和)可以用在任何位置。&lt;/li&gt;&#xA;&lt;li&gt;数字不能放在首位，但可以放在其他的任何地方。&lt;/li&gt;&#xA;&lt;li&gt;@字符只能放在标识符的首位。虽然允许使用，但不推荐将@作为常用字符。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;标识符区分大小写。例如，变量名myVar和MyVar是不同的标识符。但使用如此相似的名称会使代码更易出错并更难调试。第8章将介绍推荐的C#命名约定。使用清晰、一致、描述性的术语的重要性再怎么强调也不为过。&lt;/p&gt;&#xA;&lt;h2 id=&#34;33-关键字&#34;&gt;3.3 关键字&lt;/h2&gt;&#xA;&lt;p&gt;关键字是用来定义C#语言的字符串记号。关于关键字，一些应该知道的重要内容如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关键字不能被用作变量名或任何其他形式的标识符，除非以@字符开始。&lt;/li&gt;&#xA;&lt;li&gt;所有C#关键字全部都由小写字母组成（但是.NET类型名使用Pascal大小写约定）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;完整的C#关键字表：&lt;/p&gt;&#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34; cellspacing=&#34;0&#34;&gt;&#xD;&#xA;  &lt;tbody&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;abstract&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;const&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;extern&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;int&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;out&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;short&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;typeof&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;as&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;continue&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;false&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;interface&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;override&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;sizeof&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;uint&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;base&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;decimal&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;finally&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;internal&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;params&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;stackalloc&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;ulong&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;bool&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;default&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;fixed&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;is&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;private&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;static&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;unchecked&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;break&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;delegate&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;float&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;lock&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;protected&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;string&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;unsafe&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;byte&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;do&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;for&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;long&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;public&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;struct&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;ushort&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;case&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;double&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;foreach&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;namespace&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;readonly&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;switch&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;using&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;catch&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;else&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;goto&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;new&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;ref&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;this&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;virtual&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;char&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;enum&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;if&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;null&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;return&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;throw&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;void&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;checked&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;event&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;implicit&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;object&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;sbyte&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;true&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;volatile&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;class&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;explicit&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;in&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;operator&#x9;&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;sealed&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;try&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;when&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;while&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;/tbody&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;上下文关键字是仅在特定的语言结构中充当关键字的标识符。在那些位置，它们有特别的含义。两者的区别是，关键字不能被用作标识符，而上下文关键字可以在代码的其他部分被用作标识符。上下文关键字表：&#xD;&#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34; cellspacing=&#34;0&#34;&gt;&#xD;&#xA;  &lt;tbody&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;add&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;ascending&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;async&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;await&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;by&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;descending&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;dynamic&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;equals&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;from&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;get&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;global&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;group&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;in&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;into&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;join&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;let&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;on&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;orderby&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;partial&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;remove&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;select&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;set&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;value&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;var&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;where&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;yield&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;/tbody&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;&lt;h2 id=&#34;34-main程序的起始点&#34;&gt;3.4 Main：程序的起始点&lt;/h2&gt;&#xA;&lt;p&gt;每个C#程序必须有一个类带有Main方法（函数）。在先前所示的SimpleProgram程序中，它被声明在Program类中。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
