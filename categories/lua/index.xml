<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on 子春廿一</title>
    <link>https://nju-wrd.github.io/categories/lua/</link>
    <description>Recent content in Lua on 子春廿一</description>
    <generator>Hugo</generator>
    <language>cn</language>
    <lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://nju-wrd.github.io/categories/lua/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lua学习笔记丨04字符串</title>
      <link>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A804%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A804%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;p&gt;Lua语言中的字符串既可以表示单个字符，也可以表示一个字符串。&lt;/p&gt;&#xA;&lt;p&gt;Lua语言中，字符使用8个比特位来存储（与之对比的时7-bit ASCII）。Lua语言中的字符串可以存储包括空字符在内的所有数值代码，这意味着我们可以在字符串中存储任意的二进制数据。Lua的字符串标准库默认处理8个比特位（1Byte）的字符，此外，从Lua5.3开始还提供了一个帮助使用UTF-8编码的函数库。&lt;/p&gt;&#xA;&lt;p&gt;Lua语言中的字符串是不可变的，但是我们可以通过创建一个新字符串的方式来达到修改的目的。例如：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one string&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string.gsub(a, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;another&amp;#34;&lt;/span&gt;)&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 改变字符串中的某些部分&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;像Lua语言中的其他对象（表、函数等）一样，Lua语言中的字符串也是自动内存管理的对象之一。这意味着开发人员无需关注字符串的分配和释放。&lt;/p&gt;&#xA;&lt;p&gt;可以使用长队操作符（#）获取字符串的长度：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;a)&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;good bye&amp;#34;&lt;/span&gt;)&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt; 8&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以使用连接操作符..（两个点）来进行字符串连接。如果操作数中存在数值，那么Lua语言会先把数值转换成字符串：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;Hello &amp;#34; .. &amp;#34;World&amp;#34;&#x9;&#x9;--&amp;gt; Hello World&#xD;&#xA;&amp;#34;result is &amp;#34; .. 3&#x9;&#x9;--&amp;gt; result is 3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在Lua语言中，字符串是不可变量。字符串连接总是创建一个新字符串，而不会改变原来作为操作数的字符串。&lt;/p&gt;&#xA;&lt;h2 id=&#34;41-字符串常量&#34;&gt;4.1 字符串常量&lt;/h2&gt;&#xA;&lt;p&gt;我们可以使用一对双引号或单引号来声明字符串常量：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a line&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;another line&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用双引号和单引号声明的字符是等价的。它们两者唯一的区别在于，使用双引号声明的字符串中出现单引号时，单引号可以不用转义；使用单引号，出现双引号，不用转义。&lt;/p&gt;&#xA;&lt;p&gt;比如，与由于XML文本中一般会有双引号，所以操作XML的库可能就会使用单引号来声明XML片段。&lt;/p&gt;&#xA;&lt;p&gt;Lua语言中的字符串支持下列C语言风格的转义字符：&lt;/p&gt;&#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34; cellspacing=&#34;0&#34;&gt;&#xD;&#xA;  &lt;colgroup&gt;&#xD;&#xA;    &lt;col style=&#34;width: 30%;&#34;&gt;&#xD;&#xA;    &lt;col style=&#34;width: 70%;&#34;&gt;&#xD;&#xA;  &lt;/colgroup&gt;&#xD;&#xA;  &lt;tbody&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\a&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;响铃（bell）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\b&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;退格（back space）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\f&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;换页（form feed）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\n&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;换行（newline）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\r&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;回车（carriage return）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\t&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;水平制表符（horizontal tab）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\v&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;垂直制表符（vertical tab）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\\&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;反斜杠（backslash）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\&#34;&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;双引号（double quote）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;tr&gt;&#xD;&#xA;      &lt;td&gt;\&#39;&#39;&lt;/td&gt;&#xD;&#xA;      &lt;td&gt;单引号（single quote）&lt;/td&gt;&#xD;&#xA;    &lt;/tr&gt;&#xD;&#xA;    &lt;/tbody&gt;&#xD;&#xA;&lt;/table&gt;&#xD;&#xA;&lt;p&gt;在字符串中，还可以通过转义序列\ddd和\xhh来声明字符。其中，ddd是最多三个十进制数字组成的序列，hh是两个且必须两个十六进制数字组成的序列。在一个使用ASCII编码的系统中，&amp;ldquo;AL0\n123\&amp;ldquo;&amp;ldquo;和&amp;rsquo;\x41L0\10\04923&amp;rdquo;&amp;lsquo;实际上是一样的：0x41对应A，10对应换行符，49对应数字1，由于转义序列49后面紧邻数字，所以必须写成\049。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua学习笔记丨03数值</title>
      <link>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A803%E6%95%B0%E5%80%BC/</link>
      <pubDate>Fri, 03 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A803%E6%95%B0%E5%80%BC/</guid>
      <description>&lt;h2 id=&#34;31-数值常量&#34;&gt;3.1 数值常量&lt;/h2&gt;&#xA;&lt;p&gt;我们可以使用科学技术法（一个可选的十进制部分外加一个可选的十进制指数部分）书写数值常量，例如：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;4.77e-3&#x9;&#x9;--&amp;gt; 0.00477&#xD;&#xA;0.3e12&#x9;&#x9;--&amp;gt; 300000000000.0&#xD;&#xA;4e+3&#x9;&#x9;--&amp;gt; 4000.0&#xD;&#xA;5E+20&#x9;&#x9;--&amp;gt; 5e+020&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具有十进制小数或者指数的数值会被当做浮点类型值，否则会被当作整型值。&lt;/p&gt;&#xA;&lt;p&gt;由于整型值和浮点型值的类型都是&amp;quot;number&amp;quot;，所以它们是可以相互转化的。同时，具有相同算术值的整型值和浮点类型值在Lua语言中是相等的：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1 == 1.0&#x9;&#x9;--&amp;gt; true&#xD;&#xA;-3 == -3.0&#x9;&#x9;--&amp;gt; true&#xD;&#xA;0.2e3 == 200&#x9;&#x9;--&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在少数情况下，需要区分整型值和浮点型值时，可以使用math.type：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;math.type(3)&#x9;&#x9;--&amp;gt; integer&#xD;&#xA;math.type(3.0)&#x9;&#x9;--&amp;gt; float&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lua语言也支持以0x开头的十六进制常量。与其它语言不同的是，Lua还支持十六进制的浮点数，这种十六进制浮点数以p或P开头的指数部分组成。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0xff&#x9;&#x9;--&amp;gt; 255&#xD;&#xA;0x1A3&#x9;&#x9;--&amp;gt; 419&#xD;&#xA;0x0.2&#x9;&#x9;--&amp;gt; 0.125&#xD;&#xA;0x1p-1&#x9;&#x9;--&amp;gt; 0.5(p后面的数字表示2的幂次)&#xD;&#xA;0xa.bp2&#x9;&#x9;--&amp;gt; 42.75&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以使用%a参数，通过函数string.format最这种格式进行格式化输出：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;string.format(&amp;#34;%a&amp;#34;,419)&#x9;&#x9;--&amp;gt; 0x1.a3p+8&#xD;&#xA;string.format(&amp;#34;%a&amp;#34;,0.1)&#x9;&#x9;--&amp;gt; 0x1.999999999999ap-4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然难以阅读，但是可以保留所有浮点数的精度，并且比十进制的转换速度更快。&lt;/p&gt;&#xA;&lt;h2 id=&#34;32-算术运算&#34;&gt;3.2 算术运算&lt;/h2&gt;&#xA;&lt;p&gt;除了加、减、乘、除、取负数（单目减法）等，还支持取整除法（floor除法），取模和指数运算。&lt;/p&gt;&#xA;&lt;p&gt;当操作数一个是整型值一个是浮点型值时，Lua语言会在进行算术运算前先将整型值转换为浮点型值：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;13.0 + 25&#x9;&#x9;--&amp;gt; 38.0&#xD;&#xA;-(3 * 6.0)&#x9;&#x9;--&amp;gt; -18.0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于两个整数相除的结果不一定时整除，因此触发不遵循整型值和整型值进行算术运算的结果依然是整型值，为了避免两个整型值相除和两个浮点型值相除导致不一样的结果，除法运算操作的永远是浮点数且产生浮点型值的结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lua学习笔记丨02小插曲：八皇后问题</title>
      <link>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A802%E5%B0%8F%E6%8F%92%E6%9B%B2%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A802%E5%B0%8F%E6%8F%92%E6%9B%B2%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;本章作为小插曲讲解如何用Lua语言编写的简单但完整的程序来解决八皇后问题（eight-quene puzzle，其目标是把8个皇后合理地摆放在棋盘上，让每个皇后之间都不能相互攻击）。&lt;/p&gt;&#xA;&lt;p&gt;可以用一个8个数字组成的简单数组来表示可能的解决方案。例如{3, 7, 2, 1, 8, 6, 5, 4}中3即(1, 3)表示其位置，7即(2, 7)，换言之，数字在数组中的位置同样表示其部分位置信息。&lt;/p&gt;&#xA;&lt;p&gt;示例：求解八皇后问题的程序&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 棋盘大小&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 检查(n, c)是否不会被攻击&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isplaceok&lt;/span&gt;(a, n, c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 对于每一个已经被放置的皇后&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 同一列？&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 同一对角线？&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; n) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 同一对角线？&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 位置会被攻击&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 不会被攻击；位置有效&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--  打印棋盘&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printsolution&lt;/span&gt; (a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 对于每一行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 和每一列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 输出&amp;#34;X&amp;#34;或&amp;#34;-&amp;#34;，外加一个空格&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#x9;io.write(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    io.write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 把从&amp;#39;n&amp;#39;到&amp;#39;N&amp;#39;的所有皇后放在棋盘&amp;#39;a&amp;#39;上&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addqueen&lt;/span&gt;(a, n)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; N &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 是否所有的皇后都被放置好了？&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printsolution(a)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 尝试放置第n个皇后&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, N &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; isplaceok(a, n, c) &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                a[n] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;-- 把第n个皇后放在列&amp;#39;c&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                addqueen(a, n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 运行程序&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addqueen({}, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Lua学习笔记丨01Lua语言入门</title>
      <link>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A801lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 31 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://nju-wrd.github.io/posts/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%A801lua%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;开发环境： &lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://sourceforge.net/projects/luabinaries/files/5.4.2/Tools Executables/lua-5.4.2_Win64_bin.zip/download&#34; target=&#34;_blank&#34;&gt;Lua 5.4.2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;IDE 选择：&lt;a style=&#34;color: #0000FF;&#34; href=&#34;https://www.sublimetext.com/3&#34; target=&#34;_blank&#34;&gt;Sublime Text 3&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了在游戏开发的路上走得更远，开始学习Lua，据我了解Lua主要便于游戏热更，并且非常简单轻便。学习过程基于《Lua程序设计》第4版由梅隆魁译，出版于电子工业出版社。旨在记录一些和我所熟悉的内容的不同之处，可能并没有特别详细。在上述环境中完成书上的小练习。&lt;/p&gt;&#xA;&lt;h2 id=&#34;11-程序段&#34;&gt;1.1 程序段&lt;/h2&gt;&#xA;&lt;p&gt;Lua语言执行的每一段代码（一个文件或交互模式下的一行）称为一个&lt;em&gt;程序段&lt;/em&gt;（Chunk），即一组命令或表达式组成的序列。&lt;/p&gt;&#xA;&lt;p&gt;程序段既可以只有一句表达式构成，也可以由多句表达式和函数定义（实际是赋值表达式）组成。&lt;/p&gt;&#xA;&lt;p&gt;当不带参数地调用lua时，输入的每一条指令都会在按下回车键后立即执行，在Windows下可以用ctrl-C或调用exit函数退出交互模式。&lt;/p&gt;&#xA;&lt;p&gt;从Lua5.3版本开始，可以直接在交互模式下输入表达式，Lua语言会输出表达式的值，在5.3之前的老版本中，实现相同的效果需要在表达式之前加入一个等号。如果不想输出结果，可以在行末加入一个分号;。为了向下兼容，5.3也支持这种语法。要以代码段的方式运行代码（不在交互模式下），必须把表达式包含在函数print的调用中。&lt;/p&gt;&#xA;&lt;p&gt;在交互模式下，Lua语言解释器会把我们输入的每一行当作完整的程序块或表达式来解释执行。但是，如果遇到不完整的一行，会等待直到输入完整后再解释执行。&lt;/p&gt;&#xA;&lt;p&gt;我们可以使用-i参数让Lua语言解释器在执行完指定的程序段后进入交互模式：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% lua -i prog&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中prog为文件名，这对于调试和手工测试很有用。&lt;/p&gt;&#xA;&lt;p&gt;另一种运行程序段的方式是调用函数dofile，该函数会立即执行一个文件。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;% dofile(&amp;#34;test.lua&amp;#34;)        --加载文件&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;12-一些词法规范&#34;&gt;1.2 一些词法规范&lt;/h2&gt;&#xA;&lt;p&gt;Lua语言中的标识符（名称）是由任意字母（A-Z和a-z）、数字和下划线组成的字符串，且不能以数字开头。&lt;/p&gt;&#xA;&lt;p&gt;“下划线 + 大写字母”（例如_VERSION）组成的标识符通常被Lua语言用作特殊用途，应避免将其用作其他用途。通常会将“下划线 + 小写字母”用作哑变量（Dummy variable）。&lt;/p&gt;&#xA;&lt;p&gt;以下是Lua语言的保留字（reserve word），不能被用作标识符。&lt;/p&gt;&#xA;&lt;p&gt;and       break      do      else      elseif      end      false&lt;/p&gt;&#xA;&lt;p&gt;goto      for      function      if      in      local      nil      not&lt;/p&gt;&#xA;&lt;p&gt;or      repeat      return      then      true      until      while&lt;/p&gt;&#xA;&lt;p&gt;Lua语言是对大小写敏感的，因此虽然and是保留字，但是AND和And就是两个不同的标识符。&lt;/p&gt;&#xA;&lt;p&gt;Lua语言中使用两个连续的连字符（&amp;ndash;）表示单行注释的开始（从&amp;ndash;之后直到此行结束都是注释），使用两个连续的连字符加两对连续的左方括号表示长注释或多行注释的开始（直到两个连续的右括号为止，中间都是注释。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--[[多行&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    长注释&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在注视一段代码的时候，一个常见的技巧是将这些代码放在&amp;ndash;[[和&amp;ndash;]]之间，当我们需要重新启用这段代码的时候，只需要在第一行行首添加一个连字符即可：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;---[[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)         &lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此最后一行实际上也是一条独立的单行注释。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
